=begin


OpenAPI spec version: Swagger Server

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for NedClient::TypeclassesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TypeclassesApi' do
  before do
    # run before each test
    @instance = NedClient::TypeclassesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TypeclassesApi' do
    it 'should create an instact of TypeclassesApi' do
      @instance.should be_a(NedClient::TypeclassesApi)
    end
  end

  # unit tests for list
  # List global types
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset 
  # @option opts [Integer] :limit 
  # @return [Array<Typedescription>]
  describe 'list test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for create
  # Create global type
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Typedescription] :body 
  # @return [Typedescription]
  describe 'create test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for read
  # Read global type
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [Typedescription]
  describe 'read test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update
  # Update global type
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Typedescription] :body 
  # @return [Typedescription]
  describe 'update test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete
  # Delete global type
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_global_type_for_type_class
  # List global type values
  # 
  # @param typeclassid 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_global_type_for_type_class test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for create_global_type
  # Create global type value
  # 
  # @param typeclassid 
  # @param [Hash] opts the optional parameters
  # @option opts [Globaltype] :body 
  # @return [Globaltype]
  describe 'create_global_type test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_global_type
  # Read global type value
  # 
  # @param typeclassid 
  # @param typevalueid 
  # @param [Hash] opts the optional parameters
  # @return [Globaltype]
  describe 'get_global_type test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_global_type
  # Update global type value
  # 
  # @param typeclassid 
  # @param typevalueid 
  # @param [Hash] opts the optional parameters
  # @option opts [Globaltype] :body 
  # @return [Globaltype]
  describe 'update_global_type test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_global_type
  # Delete global type value
  # 
  # @param typeclassid 
  # @param typevalueid 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_global_type test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
