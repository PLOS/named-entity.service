=begin


OpenAPI spec version: Swagger Server

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for NedClient::IndividualsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'IndividualsApi' do
  before do
    # run before each test
    @instance = NedClient::IndividualsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of IndividualsApi' do
    it 'should create an instact of IndividualsApi' do
      @instance.should be_a(NedClient::IndividualsApi)
    end
  end

  # unit tests for find_individuals
  # Find individual matching specified attribute.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :entity 
  # @option opts [String] :attribute 
  # @option opts [String] :value 
  # @return [Array<IndividualComposite>]
  describe 'find_individuals test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for create_individual
  # Create individual
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [IndividualComposite] :body 
  # @option opts [String] :authorization 
  # @return [IndividualComposite]
  describe 'create_individual test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for read_individual_by_cas_id
  # Read individual by CAS ID
  # 
  # @param cas_id 
  # @param [Hash] opts the optional parameters
  # @return [IndividualComposite]
  describe 'read_individual_by_cas_id test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for read_individual
  # Read individual by Ned ID
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @return [IndividualComposite]
  describe 'read_individual test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_individual
  # Delete individual
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @return [IndividualComposite]
  describe 'delete_individual test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_addresses
  # List addresses
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Address>]
  describe 'get_addresses test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for create_address
  # Create address
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Address] :body 
  # @option opts [String] :authorization 
  # @return [Address]
  describe 'create_address test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_address
  # Read address
  # 
  # @param ned_id 
  # @param address_id 
  # @param [Hash] opts the optional parameters
  # @return [Address]
  describe 'get_address test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_address
  # Update address
  # 
  # @param ned_id 
  # @param address_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Address] :body 
  # @option opts [String] :authorization 
  # @return [Address]
  describe 'update_address test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_address
  # Delete address
  # 
  # @param ned_id 
  # @param address_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Array<Address>]
  describe 'delete_address test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_alerts
  # List alerts
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Alert>]
  describe 'get_alerts test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for create_alert
  # Create alert
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Alert] :body 
  # @option opts [String] :authorization 
  # @return [Alert]
  describe 'create_alert test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_alert
  # Read group
  # 
  # @param ned_id 
  # @param alert_id 
  # @param [Hash] opts the optional parameters
  # @return [Alert]
  describe 'get_alert test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_alert
  # Update alert
  # 
  # @param ned_id 
  # @param alert_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @option opts [Alert] :body 
  # @return [Alert]
  describe 'update_alert test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_alert
  # Delete alert
  # 
  # @param ned_id 
  # @param alert_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'delete_alert test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_auth_record
  # List auth record(s)
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Auth>]
  describe 'get_auth_record test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for check_password
  # Validate password
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Auth] :body 
  # @return [nil]
  describe 'check_password test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_auth_record
  # Update auth record
  # 
  # @param ned_id 
  # @param auth_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @option opts [Auth] :body 
  # @return [Auth]
  describe 'update_auth_record test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_degrees
  # List degrees
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Degree>]
  describe 'get_degrees test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_emails
  # List emails
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Email>]
  describe 'get_emails test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for create_email
  # Create email
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Email] :body 
  # @option opts [String] :authorization 
  # @return [Email]
  describe 'create_email test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_email
  # Read email
  # 
  # @param ned_id 
  # @param email_id 
  # @param [Hash] opts the optional parameters
  # @return [Email]
  describe 'get_email test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_email
  # Update email
  # 
  # @param ned_id 
  # @param email_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Email] :body 
  # @option opts [String] :authorization 
  # @return [Email]
  describe 'update_email test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_email
  # Delete email
  # 
  # @param ned_id 
  # @param email_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'delete_email test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_groups
  # List groups
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Group>]
  describe 'get_groups test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for create_group
  # Create group
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Group] :body 
  # @option opts [String] :authorization 
  # @return [Group]
  describe 'create_group test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_group
  # Read group
  # 
  # @param ned_id 
  # @param group_id 
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'get_group test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_group
  # Update group
  # 
  # @param ned_id 
  # @param group_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @option opts [Group] :body 
  # @return [Group]
  describe 'update_group test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_group
  # Delete group
  # 
  # @param ned_id 
  # @param group_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'delete_group test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_profiles
  # List profiles
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Individualprofile>]
  describe 'get_profiles test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_profile
  # Add profile
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Individualprofile] :body 
  # @option opts [String] :authorization 
  # @return [Individualprofile]
  describe 'add_profile test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_profile
  # Read profile
  # 
  # @param ned_id 
  # @param profile_id 
  # @param [Hash] opts the optional parameters
  # @return [Individualprofile]
  describe 'get_profile test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_profile
  # Update a profile
  # 
  # @param ned_id 
  # @param profile_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @option opts [Individualprofile] :body 
  # @return [Individualprofile]
  describe 'update_profile test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_profile
  # Delete a profile
  # 
  # @param ned_id 
  # @param profile_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'delete_profile test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_phonenumbers
  # List phone numbers
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Phonenumber>]
  describe 'get_phonenumbers test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_relationships
  # List relationships
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Relationship>]
  describe 'get_relationships test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for create_relationship
  # Create relationship
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Relationship] :body 
  # @option opts [String] :authorization 
  # @return [Relationship]
  describe 'create_relationship test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_relationship
  # Read relationship
  # 
  # @param ned_id 
  # @param relationship_id 
  # @param [Hash] opts the optional parameters
  # @return [Relationship]
  describe 'get_relationship test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_relationship
  # Update relationship
  # 
  # @param ned_id 
  # @param relationship_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @option opts [Relationship] :body 
  # @return [Relationship]
  describe 'update_relationship test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_relationship
  # Delete relationship
  # 
  # @param ned_id 
  # @param relationship_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'delete_relationship test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_uids
  # List UIDs
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Uniqueidentifier>]
  describe 'get_uids test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for create_uid
  # Create UID
  # 
  # @param ned_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Uniqueidentifier] :body 
  # @option opts [String] :authorization 
  # @return [Uniqueidentifier]
  describe 'create_uid test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_uid
  # Read uid
  # 
  # @param ned_id 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [Uniqueidentifier]
  describe 'get_uid test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_uid
  # Update UID
  # 
  # @param ned_id 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @option opts [Uniqueidentifier] :body 
  # @return [Uniqueidentifier]
  describe 'update_uid test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_uid
  # Delete UID
  # 
  # @param ned_id 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'delete_uid test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for read_individual_by_uid
  # Read individual by UID
  # 
  # @param uid_type 
  # @param uid_value 
  # @param [Hash] opts the optional parameters
  # @return [IndividualComposite]
  describe 'read_individual_by_uid test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
