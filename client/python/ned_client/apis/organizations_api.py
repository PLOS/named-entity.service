# coding: utf-8

"""
OrganizationsApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class OrganizationsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def find_organizations(self, **kwargs):
        """
        Find organizations matching specified attribute.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_organizations(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str attribute: 
        :param str value: 
        :return: list[OrganizationComposite]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attribute', 'value']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_organizations" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/organizations'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'attribute' in params:
            query_params['attribute'] = params['attribute']
        if 'value' in params:
            query_params['value'] = params['value']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[OrganizationComposite]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_organization(self, **kwargs):
        """
        Create organization
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_organization(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OrganizationComposite body: 
        :param str authorization: 
        :return: OrganizationComposite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_organization" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/organizations'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='OrganizationComposite',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def read_organization(self, ned_id, **kwargs):
        """
        Read organization by Ned ID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_organization(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: OrganizationComposite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_organization" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `read_organization`")

        resource_path = '/organizations/{nedId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='OrganizationComposite',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_addresses(self, ned_id, **kwargs):
        """
        List addresses
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_addresses(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: list[Address]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_addresses" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `get_addresses`")

        resource_path = '/organizations/{nedId}/addresses'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Address]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_address(self, ned_id, **kwargs):
        """
        Create address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_address(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param Address body: 
        :param str authorization: 
        :return: Address
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id', 'body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_address" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `create_address`")

        resource_path = '/organizations/{nedId}/addresses'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Address',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_address(self, ned_id, address_id, **kwargs):
        """
        Read address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_address(ned_id, address_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int address_id:  (required)
        :return: Address
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id', 'address_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_address" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `get_address`")
        # verify the required parameter 'address_id' is set
        if ('address_id' not in params) or (params['address_id'] is None):
            raise ValueError("Missing the required parameter `address_id` when calling `get_address`")

        resource_path = '/organizations/{nedId}/addresses/{addressId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'address_id' in params:
            path_params['addressId'] = params['address_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Address',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_address(self, ned_id, address_id, **kwargs):
        """
        Update address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_address(ned_id, address_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int address_id:  (required)
        :param Address body: 
        :param str authorization: 
        :return: Address
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id', 'address_id', 'body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_address" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `update_address`")
        # verify the required parameter 'address_id' is set
        if ('address_id' not in params) or (params['address_id'] is None):
            raise ValueError("Missing the required parameter `address_id` when calling `update_address`")

        resource_path = '/organizations/{nedId}/addresses/{addressId}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'address_id' in params:
            path_params['addressId'] = params['address_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Address',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_address(self, ned_id, address_id, **kwargs):
        """
        Delete address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_address(ned_id, address_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int address_id:  (required)
        :param str authorization: 
        :return: list[Address]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id', 'address_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_address" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `delete_address`")
        # verify the required parameter 'address_id' is set
        if ('address_id' not in params) or (params['address_id'] is None):
            raise ValueError("Missing the required parameter `address_id` when calling `delete_address`")

        resource_path = '/organizations/{nedId}/addresses/{addressId}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'address_id' in params:
            path_params['addressId'] = params['address_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Address]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_emails(self, ned_id, **kwargs):
        """
        List emails
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_emails(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: list[Email]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_emails" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `get_emails`")

        resource_path = '/organizations/{nedId}/emails'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Email]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_email(self, ned_id, **kwargs):
        """
        Create email
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_email(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param Email body: 
        :param str authorization: 
        :return: Email
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id', 'body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_email" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `create_email`")

        resource_path = '/organizations/{nedId}/emails'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Email',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_email(self, ned_id, email_id, **kwargs):
        """
        Read email
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_email(ned_id, email_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int email_id:  (required)
        :return: Email
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id', 'email_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `get_email`")
        # verify the required parameter 'email_id' is set
        if ('email_id' not in params) or (params['email_id'] is None):
            raise ValueError("Missing the required parameter `email_id` when calling `get_email`")

        resource_path = '/organizations/{nedId}/emails/{emailId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'email_id' in params:
            path_params['emailId'] = params['email_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Email',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_email(self, ned_id, email_id, **kwargs):
        """
        Update email
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_email(ned_id, email_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int email_id:  (required)
        :param Email body: 
        :param str authorization: 
        :return: Email
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id', 'email_id', 'body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_email" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `update_email`")
        # verify the required parameter 'email_id' is set
        if ('email_id' not in params) or (params['email_id'] is None):
            raise ValueError("Missing the required parameter `email_id` when calling `update_email`")

        resource_path = '/organizations/{nedId}/emails/{emailId}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'email_id' in params:
            path_params['emailId'] = params['email_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Email',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_email(self, ned_id, email_id, **kwargs):
        """
        Delete email
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_email(ned_id, email_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int email_id:  (required)
        :param str authorization: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id', 'email_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_email" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `delete_email`")
        # verify the required parameter 'email_id' is set
        if ('email_id' not in params) or (params['email_id'] is None):
            raise ValueError("Missing the required parameter `email_id` when calling `delete_email`")

        resource_path = '/organizations/{nedId}/emails/{emailId}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'email_id' in params:
            path_params['emailId'] = params['email_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_phonenumbers(self, ned_id, **kwargs):
        """
        List phone numbers
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_phonenumbers(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: list[Phonenumber]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phonenumbers" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `get_phonenumbers`")

        resource_path = '/organizations/{nedId}/phonenumbers'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Phonenumber]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_uids(self, ned_id, **kwargs):
        """
        List UIDs
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_uids(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: list[Uniqueidentifier]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_uids" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `get_uids`")

        resource_path = '/organizations/{nedId}/uids'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Uniqueidentifier]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_uid(self, ned_id, **kwargs):
        """
        Create UID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_uid(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param Uniqueidentifier body: 
        :param str authorization: 
        :return: Uniqueidentifier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id', 'body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_uid" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `create_uid`")

        resource_path = '/organizations/{nedId}/uids'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Uniqueidentifier',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_uid(self, ned_id, id, **kwargs):
        """
        Read uid
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_uid(ned_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int id:  (required)
        :return: Uniqueidentifier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id', 'id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_uid" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `get_uid`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_uid`")

        resource_path = '/organizations/{nedId}/uids/{id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Uniqueidentifier',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_uid(self, ned_id, id, **kwargs):
        """
        Update UID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_uid(ned_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int id:  (required)
        :param str authorization: 
        :param Uniqueidentifier body: 
        :return: Uniqueidentifier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ned_id', 'id', 'authorization', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_uid" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ned_id' is set
        if ('ned_id' not in params) or (params['ned_id'] is None):
            raise ValueError("Missing the required parameter `ned_id` when calling `update_uid`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_uid`")

        resource_path = '/organizations/{nedId}/uids/{id}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Uniqueidentifier',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def read_organization_by_uid(self, uid_type, uid_value, **kwargs):
        """
        Read organization by UID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_organization_by_uid(uid_type, uid_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str uid_type:  (required)
        :param str uid_value:  (required)
        :return: OrganizationComposite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid_type', 'uid_value']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_organization_by_uid" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'uid_type' is set
        if ('uid_type' not in params) or (params['uid_type'] is None):
            raise ValueError("Missing the required parameter `uid_type` when calling `read_organization_by_uid`")
        # verify the required parameter 'uid_value' is set
        if ('uid_value' not in params) or (params['uid_value'] is None):
            raise ValueError("Missing the required parameter `uid_value` when calling `read_organization_by_uid`")

        resource_path = '/organizations/{uidType}/{uidValue}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'uid_type' in params:
            path_params['uidType'] = params['uid_type']
        if 'uid_value' in params:
            path_params['uidValue'] = params['uid_value']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='OrganizationComposite',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
