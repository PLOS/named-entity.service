# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Individualprofile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Individualprofile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'nedid': 'int',
            'source': 'str',
            'sourcetypeid': 'int',
            'created': 'datetime',
            'lastmodified': 'datetime',
            'createdby': 'int',
            'createdbyname': 'str',
            'lastmodifiedby': 'int',
            'lastmodifiedbyname': 'str',
            'firstname': 'str',
            'middlename': 'str',
            'lastname': 'str',
            'nickname': 'str',
            'nameprefix': 'str',
            'nameprefixtypeid': 'int',
            'namesuffix': 'str',
            'namesuffixtypeid': 'int',
            'displayname': 'str',
            'biography': 'str',
            'isactive': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'nedid': 'nedid',
            'source': 'source',
            'sourcetypeid': 'sourcetypeid',
            'created': 'created',
            'lastmodified': 'lastmodified',
            'createdby': 'createdby',
            'createdbyname': 'createdbyname',
            'lastmodifiedby': 'lastmodifiedby',
            'lastmodifiedbyname': 'lastmodifiedbyname',
            'firstname': 'firstname',
            'middlename': 'middlename',
            'lastname': 'lastname',
            'nickname': 'nickname',
            'nameprefix': 'nameprefix',
            'nameprefixtypeid': 'nameprefixtypeid',
            'namesuffix': 'namesuffix',
            'namesuffixtypeid': 'namesuffixtypeid',
            'displayname': 'displayname',
            'biography': 'biography',
            'isactive': 'isactive'
        }

        self._id = None
        self._nedid = None
        self._source = None
        self._sourcetypeid = None
        self._created = None
        self._lastmodified = None
        self._createdby = None
        self._createdbyname = None
        self._lastmodifiedby = None
        self._lastmodifiedbyname = None
        self._firstname = None
        self._middlename = None
        self._lastname = None
        self._nickname = None
        self._nameprefix = None
        self._nameprefixtypeid = None
        self._namesuffix = None
        self._namesuffixtypeid = None
        self._displayname = None
        self._biography = None
        self._isactive = None

    @property
    def id(self):
        """
        Gets the id of this Individualprofile.


        :return: The id of this Individualprofile.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Individualprofile.


        :param id: The id of this Individualprofile.
        :type: int
        """
        self._id = id

    @property
    def nedid(self):
        """
        Gets the nedid of this Individualprofile.


        :return: The nedid of this Individualprofile.
        :rtype: int
        """
        return self._nedid

    @nedid.setter
    def nedid(self, nedid):
        """
        Sets the nedid of this Individualprofile.


        :param nedid: The nedid of this Individualprofile.
        :type: int
        """
        self._nedid = nedid

    @property
    def source(self):
        """
        Gets the source of this Individualprofile.


        :return: The source of this Individualprofile.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Individualprofile.


        :param source: The source of this Individualprofile.
        :type: str
        """
        self._source = source

    @property
    def sourcetypeid(self):
        """
        Gets the sourcetypeid of this Individualprofile.


        :return: The sourcetypeid of this Individualprofile.
        :rtype: int
        """
        return self._sourcetypeid

    @sourcetypeid.setter
    def sourcetypeid(self, sourcetypeid):
        """
        Sets the sourcetypeid of this Individualprofile.


        :param sourcetypeid: The sourcetypeid of this Individualprofile.
        :type: int
        """
        self._sourcetypeid = sourcetypeid

    @property
    def created(self):
        """
        Gets the created of this Individualprofile.


        :return: The created of this Individualprofile.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Individualprofile.


        :param created: The created of this Individualprofile.
        :type: datetime
        """
        self._created = created

    @property
    def lastmodified(self):
        """
        Gets the lastmodified of this Individualprofile.


        :return: The lastmodified of this Individualprofile.
        :rtype: datetime
        """
        return self._lastmodified

    @lastmodified.setter
    def lastmodified(self, lastmodified):
        """
        Sets the lastmodified of this Individualprofile.


        :param lastmodified: The lastmodified of this Individualprofile.
        :type: datetime
        """
        self._lastmodified = lastmodified

    @property
    def createdby(self):
        """
        Gets the createdby of this Individualprofile.


        :return: The createdby of this Individualprofile.
        :rtype: int
        """
        return self._createdby

    @createdby.setter
    def createdby(self, createdby):
        """
        Sets the createdby of this Individualprofile.


        :param createdby: The createdby of this Individualprofile.
        :type: int
        """
        self._createdby = createdby

    @property
    def createdbyname(self):
        """
        Gets the createdbyname of this Individualprofile.


        :return: The createdbyname of this Individualprofile.
        :rtype: str
        """
        return self._createdbyname

    @createdbyname.setter
    def createdbyname(self, createdbyname):
        """
        Sets the createdbyname of this Individualprofile.


        :param createdbyname: The createdbyname of this Individualprofile.
        :type: str
        """
        self._createdbyname = createdbyname

    @property
    def lastmodifiedby(self):
        """
        Gets the lastmodifiedby of this Individualprofile.


        :return: The lastmodifiedby of this Individualprofile.
        :rtype: int
        """
        return self._lastmodifiedby

    @lastmodifiedby.setter
    def lastmodifiedby(self, lastmodifiedby):
        """
        Sets the lastmodifiedby of this Individualprofile.


        :param lastmodifiedby: The lastmodifiedby of this Individualprofile.
        :type: int
        """
        self._lastmodifiedby = lastmodifiedby

    @property
    def lastmodifiedbyname(self):
        """
        Gets the lastmodifiedbyname of this Individualprofile.


        :return: The lastmodifiedbyname of this Individualprofile.
        :rtype: str
        """
        return self._lastmodifiedbyname

    @lastmodifiedbyname.setter
    def lastmodifiedbyname(self, lastmodifiedbyname):
        """
        Sets the lastmodifiedbyname of this Individualprofile.


        :param lastmodifiedbyname: The lastmodifiedbyname of this Individualprofile.
        :type: str
        """
        self._lastmodifiedbyname = lastmodifiedbyname

    @property
    def firstname(self):
        """
        Gets the firstname of this Individualprofile.


        :return: The firstname of this Individualprofile.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """
        Sets the firstname of this Individualprofile.


        :param firstname: The firstname of this Individualprofile.
        :type: str
        """
        self._firstname = firstname

    @property
    def middlename(self):
        """
        Gets the middlename of this Individualprofile.


        :return: The middlename of this Individualprofile.
        :rtype: str
        """
        return self._middlename

    @middlename.setter
    def middlename(self, middlename):
        """
        Sets the middlename of this Individualprofile.


        :param middlename: The middlename of this Individualprofile.
        :type: str
        """
        self._middlename = middlename

    @property
    def lastname(self):
        """
        Gets the lastname of this Individualprofile.


        :return: The lastname of this Individualprofile.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """
        Sets the lastname of this Individualprofile.


        :param lastname: The lastname of this Individualprofile.
        :type: str
        """
        self._lastname = lastname

    @property
    def nickname(self):
        """
        Gets the nickname of this Individualprofile.


        :return: The nickname of this Individualprofile.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """
        Sets the nickname of this Individualprofile.


        :param nickname: The nickname of this Individualprofile.
        :type: str
        """
        self._nickname = nickname

    @property
    def nameprefix(self):
        """
        Gets the nameprefix of this Individualprofile.


        :return: The nameprefix of this Individualprofile.
        :rtype: str
        """
        return self._nameprefix

    @nameprefix.setter
    def nameprefix(self, nameprefix):
        """
        Sets the nameprefix of this Individualprofile.


        :param nameprefix: The nameprefix of this Individualprofile.
        :type: str
        """
        self._nameprefix = nameprefix

    @property
    def nameprefixtypeid(self):
        """
        Gets the nameprefixtypeid of this Individualprofile.


        :return: The nameprefixtypeid of this Individualprofile.
        :rtype: int
        """
        return self._nameprefixtypeid

    @nameprefixtypeid.setter
    def nameprefixtypeid(self, nameprefixtypeid):
        """
        Sets the nameprefixtypeid of this Individualprofile.


        :param nameprefixtypeid: The nameprefixtypeid of this Individualprofile.
        :type: int
        """
        self._nameprefixtypeid = nameprefixtypeid

    @property
    def namesuffix(self):
        """
        Gets the namesuffix of this Individualprofile.


        :return: The namesuffix of this Individualprofile.
        :rtype: str
        """
        return self._namesuffix

    @namesuffix.setter
    def namesuffix(self, namesuffix):
        """
        Sets the namesuffix of this Individualprofile.


        :param namesuffix: The namesuffix of this Individualprofile.
        :type: str
        """
        self._namesuffix = namesuffix

    @property
    def namesuffixtypeid(self):
        """
        Gets the namesuffixtypeid of this Individualprofile.


        :return: The namesuffixtypeid of this Individualprofile.
        :rtype: int
        """
        return self._namesuffixtypeid

    @namesuffixtypeid.setter
    def namesuffixtypeid(self, namesuffixtypeid):
        """
        Sets the namesuffixtypeid of this Individualprofile.


        :param namesuffixtypeid: The namesuffixtypeid of this Individualprofile.
        :type: int
        """
        self._namesuffixtypeid = namesuffixtypeid

    @property
    def displayname(self):
        """
        Gets the displayname of this Individualprofile.


        :return: The displayname of this Individualprofile.
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """
        Sets the displayname of this Individualprofile.


        :param displayname: The displayname of this Individualprofile.
        :type: str
        """
        self._displayname = displayname

    @property
    def biography(self):
        """
        Gets the biography of this Individualprofile.


        :return: The biography of this Individualprofile.
        :rtype: str
        """
        return self._biography

    @biography.setter
    def biography(self, biography):
        """
        Sets the biography of this Individualprofile.


        :param biography: The biography of this Individualprofile.
        :type: str
        """
        self._biography = biography

    @property
    def isactive(self):
        """
        Gets the isactive of this Individualprofile.


        :return: The isactive of this Individualprofile.
        :rtype: bool
        """
        return self._isactive

    @isactive.setter
    def isactive(self, isactive):
        """
        Sets the isactive of this Individualprofile.


        :param isactive: The isactive of this Individualprofile.
        :type: bool
        """
        self._isactive = isactive

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
