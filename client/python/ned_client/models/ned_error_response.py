# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class NedErrorResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NedErrorResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'failure_msg': 'str',
            'error_code': 'int',
            'error_msg': 'str',
            'detailed_msg': 'str',
            'acceptable_values': 'list[str]',
            'timestamp': 'datetime'
        }

        self.attribute_map = {
            'failure_msg': 'failureMsg',
            'error_code': 'errorCode',
            'error_msg': 'errorMsg',
            'detailed_msg': 'detailedMsg',
            'acceptable_values': 'acceptableValues',
            'timestamp': 'timestamp'
        }

        self._failure_msg = None
        self._error_code = None
        self._error_msg = None
        self._detailed_msg = None
        self._acceptable_values = None
        self._timestamp = None

    @property
    def failure_msg(self):
        """
        Gets the failure_msg of this NedErrorResponse.


        :return: The failure_msg of this NedErrorResponse.
        :rtype: str
        """
        return self._failure_msg

    @failure_msg.setter
    def failure_msg(self, failure_msg):
        """
        Sets the failure_msg of this NedErrorResponse.


        :param failure_msg: The failure_msg of this NedErrorResponse.
        :type: str
        """
        self._failure_msg = failure_msg

    @property
    def error_code(self):
        """
        Gets the error_code of this NedErrorResponse.


        :return: The error_code of this NedErrorResponse.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """
        Sets the error_code of this NedErrorResponse.


        :param error_code: The error_code of this NedErrorResponse.
        :type: int
        """
        self._error_code = error_code

    @property
    def error_msg(self):
        """
        Gets the error_msg of this NedErrorResponse.


        :return: The error_msg of this NedErrorResponse.
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """
        Sets the error_msg of this NedErrorResponse.


        :param error_msg: The error_msg of this NedErrorResponse.
        :type: str
        """
        self._error_msg = error_msg

    @property
    def detailed_msg(self):
        """
        Gets the detailed_msg of this NedErrorResponse.


        :return: The detailed_msg of this NedErrorResponse.
        :rtype: str
        """
        return self._detailed_msg

    @detailed_msg.setter
    def detailed_msg(self, detailed_msg):
        """
        Sets the detailed_msg of this NedErrorResponse.


        :param detailed_msg: The detailed_msg of this NedErrorResponse.
        :type: str
        """
        self._detailed_msg = detailed_msg

    @property
    def acceptable_values(self):
        """
        Gets the acceptable_values of this NedErrorResponse.


        :return: The acceptable_values of this NedErrorResponse.
        :rtype: list[str]
        """
        return self._acceptable_values

    @acceptable_values.setter
    def acceptable_values(self, acceptable_values):
        """
        Sets the acceptable_values of this NedErrorResponse.


        :param acceptable_values: The acceptable_values of this NedErrorResponse.
        :type: list[str]
        """
        self._acceptable_values = acceptable_values

    @property
    def timestamp(self):
        """
        Gets the timestamp of this NedErrorResponse.


        :return: The timestamp of this NedErrorResponse.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this NedErrorResponse.


        :param timestamp: The timestamp of this NedErrorResponse.
        :type: datetime
        """
        self._timestamp = timestamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

