# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Uniqueidentifier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Uniqueidentifier - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'nedid': 'int',
            'source': 'str',
            'sourcetypeid': 'int',
            'created': 'datetime',
            'lastmodified': 'datetime',
            'createdby': 'int',
            'createdbyname': 'str',
            'lastmodifiedby': 'int',
            'lastmodifiedbyname': 'str',
            'typeid': 'int',
            'type': 'str',
            'uniqueidentifier': 'str',
            'metadata': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'nedid': 'nedid',
            'source': 'source',
            'sourcetypeid': 'sourcetypeid',
            'created': 'created',
            'lastmodified': 'lastmodified',
            'createdby': 'createdby',
            'createdbyname': 'createdbyname',
            'lastmodifiedby': 'lastmodifiedby',
            'lastmodifiedbyname': 'lastmodifiedbyname',
            'typeid': 'typeid',
            'type': 'type',
            'uniqueidentifier': 'uniqueidentifier',
            'metadata': 'metadata'
        }

        self._id = None
        self._nedid = None
        self._source = None
        self._sourcetypeid = None
        self._created = None
        self._lastmodified = None
        self._createdby = None
        self._createdbyname = None
        self._lastmodifiedby = None
        self._lastmodifiedbyname = None
        self._typeid = None
        self._type = None
        self._uniqueidentifier = None
        self._metadata = None

    @property
    def id(self):
        """
        Gets the id of this Uniqueidentifier.


        :return: The id of this Uniqueidentifier.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Uniqueidentifier.


        :param id: The id of this Uniqueidentifier.
        :type: int
        """
        self._id = id

    @property
    def nedid(self):
        """
        Gets the nedid of this Uniqueidentifier.


        :return: The nedid of this Uniqueidentifier.
        :rtype: int
        """
        return self._nedid

    @nedid.setter
    def nedid(self, nedid):
        """
        Sets the nedid of this Uniqueidentifier.


        :param nedid: The nedid of this Uniqueidentifier.
        :type: int
        """
        self._nedid = nedid

    @property
    def source(self):
        """
        Gets the source of this Uniqueidentifier.


        :return: The source of this Uniqueidentifier.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Uniqueidentifier.


        :param source: The source of this Uniqueidentifier.
        :type: str
        """
        self._source = source

    @property
    def sourcetypeid(self):
        """
        Gets the sourcetypeid of this Uniqueidentifier.


        :return: The sourcetypeid of this Uniqueidentifier.
        :rtype: int
        """
        return self._sourcetypeid

    @sourcetypeid.setter
    def sourcetypeid(self, sourcetypeid):
        """
        Sets the sourcetypeid of this Uniqueidentifier.


        :param sourcetypeid: The sourcetypeid of this Uniqueidentifier.
        :type: int
        """
        self._sourcetypeid = sourcetypeid

    @property
    def created(self):
        """
        Gets the created of this Uniqueidentifier.


        :return: The created of this Uniqueidentifier.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Uniqueidentifier.


        :param created: The created of this Uniqueidentifier.
        :type: datetime
        """
        self._created = created

    @property
    def lastmodified(self):
        """
        Gets the lastmodified of this Uniqueidentifier.


        :return: The lastmodified of this Uniqueidentifier.
        :rtype: datetime
        """
        return self._lastmodified

    @lastmodified.setter
    def lastmodified(self, lastmodified):
        """
        Sets the lastmodified of this Uniqueidentifier.


        :param lastmodified: The lastmodified of this Uniqueidentifier.
        :type: datetime
        """
        self._lastmodified = lastmodified

    @property
    def createdby(self):
        """
        Gets the createdby of this Uniqueidentifier.


        :return: The createdby of this Uniqueidentifier.
        :rtype: int
        """
        return self._createdby

    @createdby.setter
    def createdby(self, createdby):
        """
        Sets the createdby of this Uniqueidentifier.


        :param createdby: The createdby of this Uniqueidentifier.
        :type: int
        """
        self._createdby = createdby

    @property
    def createdbyname(self):
        """
        Gets the createdbyname of this Uniqueidentifier.


        :return: The createdbyname of this Uniqueidentifier.
        :rtype: str
        """
        return self._createdbyname

    @createdbyname.setter
    def createdbyname(self, createdbyname):
        """
        Sets the createdbyname of this Uniqueidentifier.


        :param createdbyname: The createdbyname of this Uniqueidentifier.
        :type: str
        """
        self._createdbyname = createdbyname

    @property
    def lastmodifiedby(self):
        """
        Gets the lastmodifiedby of this Uniqueidentifier.


        :return: The lastmodifiedby of this Uniqueidentifier.
        :rtype: int
        """
        return self._lastmodifiedby

    @lastmodifiedby.setter
    def lastmodifiedby(self, lastmodifiedby):
        """
        Sets the lastmodifiedby of this Uniqueidentifier.


        :param lastmodifiedby: The lastmodifiedby of this Uniqueidentifier.
        :type: int
        """
        self._lastmodifiedby = lastmodifiedby

    @property
    def lastmodifiedbyname(self):
        """
        Gets the lastmodifiedbyname of this Uniqueidentifier.


        :return: The lastmodifiedbyname of this Uniqueidentifier.
        :rtype: str
        """
        return self._lastmodifiedbyname

    @lastmodifiedbyname.setter
    def lastmodifiedbyname(self, lastmodifiedbyname):
        """
        Sets the lastmodifiedbyname of this Uniqueidentifier.


        :param lastmodifiedbyname: The lastmodifiedbyname of this Uniqueidentifier.
        :type: str
        """
        self._lastmodifiedbyname = lastmodifiedbyname

    @property
    def typeid(self):
        """
        Gets the typeid of this Uniqueidentifier.


        :return: The typeid of this Uniqueidentifier.
        :rtype: int
        """
        return self._typeid

    @typeid.setter
    def typeid(self, typeid):
        """
        Sets the typeid of this Uniqueidentifier.


        :param typeid: The typeid of this Uniqueidentifier.
        :type: int
        """
        self._typeid = typeid

    @property
    def type(self):
        """
        Gets the type of this Uniqueidentifier.


        :return: The type of this Uniqueidentifier.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Uniqueidentifier.


        :param type: The type of this Uniqueidentifier.
        :type: str
        """
        self._type = type

    @property
    def uniqueidentifier(self):
        """
        Gets the uniqueidentifier of this Uniqueidentifier.


        :return: The uniqueidentifier of this Uniqueidentifier.
        :rtype: str
        """
        return self._uniqueidentifier

    @uniqueidentifier.setter
    def uniqueidentifier(self, uniqueidentifier):
        """
        Sets the uniqueidentifier of this Uniqueidentifier.


        :param uniqueidentifier: The uniqueidentifier of this Uniqueidentifier.
        :type: str
        """
        self._uniqueidentifier = uniqueidentifier

    @property
    def metadata(self):
        """
        Gets the metadata of this Uniqueidentifier.


        :return: The metadata of this Uniqueidentifier.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this Uniqueidentifier.


        :param metadata: The metadata of this Uniqueidentifier.
        :type: str
        """
        self._metadata = metadata

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
