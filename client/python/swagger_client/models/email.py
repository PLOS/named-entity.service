# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Email(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Email - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'typeid': 'int',
            'emailaddress': 'str',
            'verified': 'bool',
            'isactive': 'bool',
            'source': 'str',
            'nedid': 'int',
            'sourcetypeid': 'int',
            'id': 'int'
        }

        self.attribute_map = {
            'type': 'type',
            'typeid': 'typeid',
            'emailaddress': 'emailaddress',
            'verified': 'verified',
            'isactive': 'isactive',
            'source': 'source',
            'nedid': 'nedid',
            'sourcetypeid': 'sourcetypeid',
            'id': 'id'
        }

        self._type = None
        self._typeid = None
        self._emailaddress = None
        self._verified = None
        self._isactive = None
        self._source = None
        self._nedid = None
        self._sourcetypeid = None
        self._id = None

    @property
    def type(self):
        """
        Gets the type of this Email.


        :return: The type of this Email.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Email.


        :param type: The type of this Email.
        :type: str
        """
        self._type = type

    @property
    def typeid(self):
        """
        Gets the typeid of this Email.


        :return: The typeid of this Email.
        :rtype: int
        """
        return self._typeid

    @typeid.setter
    def typeid(self, typeid):
        """
        Sets the typeid of this Email.


        :param typeid: The typeid of this Email.
        :type: int
        """
        self._typeid = typeid

    @property
    def emailaddress(self):
        """
        Gets the emailaddress of this Email.


        :return: The emailaddress of this Email.
        :rtype: str
        """
        return self._emailaddress

    @emailaddress.setter
    def emailaddress(self, emailaddress):
        """
        Sets the emailaddress of this Email.


        :param emailaddress: The emailaddress of this Email.
        :type: str
        """
        self._emailaddress = emailaddress

    @property
    def verified(self):
        """
        Gets the verified of this Email.


        :return: The verified of this Email.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """
        Sets the verified of this Email.


        :param verified: The verified of this Email.
        :type: bool
        """
        self._verified = verified

    @property
    def isactive(self):
        """
        Gets the isactive of this Email.


        :return: The isactive of this Email.
        :rtype: bool
        """
        return self._isactive

    @isactive.setter
    def isactive(self, isactive):
        """
        Sets the isactive of this Email.


        :param isactive: The isactive of this Email.
        :type: bool
        """
        self._isactive = isactive

    @property
    def source(self):
        """
        Gets the source of this Email.


        :return: The source of this Email.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Email.


        :param source: The source of this Email.
        :type: str
        """
        self._source = source

    @property
    def nedid(self):
        """
        Gets the nedid of this Email.


        :return: The nedid of this Email.
        :rtype: int
        """
        return self._nedid

    @nedid.setter
    def nedid(self, nedid):
        """
        Sets the nedid of this Email.


        :param nedid: The nedid of this Email.
        :type: int
        """
        self._nedid = nedid

    @property
    def sourcetypeid(self):
        """
        Gets the sourcetypeid of this Email.


        :return: The sourcetypeid of this Email.
        :rtype: int
        """
        return self._sourcetypeid

    @sourcetypeid.setter
    def sourcetypeid(self, sourcetypeid):
        """
        Sets the sourcetypeid of this Email.


        :param sourcetypeid: The sourcetypeid of this Email.
        :type: int
        """
        self._sourcetypeid = sourcetypeid

    @property
    def id(self):
        """
        Gets the id of this Email.


        :return: The id of this Email.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Email.


        :param id: The id of this Email.
        :type: int
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
