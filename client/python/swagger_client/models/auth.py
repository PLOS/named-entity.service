# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Auth(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Auth - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'nedid': 'int',
            'source': 'str',
            'sourcetypeid': 'int',
            'created': 'datetime',
            'lastmodified': 'datetime',
            'createdby': 'int',
            'createdbyname': 'str',
            'lastmodifiedby': 'int',
            'lastmodifiedbyname': 'str',
            'email': 'str',
            'emailid': 'int',
            'authid': 'str',
            'plain_text_password': 'str',
            'password': 'str',
            'passwordreset': 'str',
            'verificationtoken': 'str',
            'verified': 'str',
            'isactive': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'nedid': 'nedid',
            'source': 'source',
            'sourcetypeid': 'sourcetypeid',
            'created': 'created',
            'lastmodified': 'lastmodified',
            'createdby': 'createdby',
            'createdbyname': 'createdbyname',
            'lastmodifiedby': 'lastmodifiedby',
            'lastmodifiedbyname': 'lastmodifiedbyname',
            'email': 'email',
            'emailid': 'emailid',
            'authid': 'authid',
            'plain_text_password': 'plainTextPassword',
            'password': 'password',
            'passwordreset': 'passwordreset',
            'verificationtoken': 'verificationtoken',
            'verified': 'verified',
            'isactive': 'isactive'
        }

        self._id = None
        self._nedid = None
        self._source = None
        self._sourcetypeid = None
        self._created = None
        self._lastmodified = None
        self._createdby = None
        self._createdbyname = None
        self._lastmodifiedby = None
        self._lastmodifiedbyname = None
        self._email = None
        self._emailid = None
        self._authid = None
        self._plain_text_password = None
        self._password = None
        self._passwordreset = None
        self._verificationtoken = None
        self._verified = None
        self._isactive = None

    @property
    def id(self):
        """
        Gets the id of this Auth.


        :return: The id of this Auth.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Auth.


        :param id: The id of this Auth.
        :type: int
        """
        self._id = id

    @property
    def nedid(self):
        """
        Gets the nedid of this Auth.


        :return: The nedid of this Auth.
        :rtype: int
        """
        return self._nedid

    @nedid.setter
    def nedid(self, nedid):
        """
        Sets the nedid of this Auth.


        :param nedid: The nedid of this Auth.
        :type: int
        """
        self._nedid = nedid

    @property
    def source(self):
        """
        Gets the source of this Auth.


        :return: The source of this Auth.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Auth.


        :param source: The source of this Auth.
        :type: str
        """
        self._source = source

    @property
    def sourcetypeid(self):
        """
        Gets the sourcetypeid of this Auth.


        :return: The sourcetypeid of this Auth.
        :rtype: int
        """
        return self._sourcetypeid

    @sourcetypeid.setter
    def sourcetypeid(self, sourcetypeid):
        """
        Sets the sourcetypeid of this Auth.


        :param sourcetypeid: The sourcetypeid of this Auth.
        :type: int
        """
        self._sourcetypeid = sourcetypeid

    @property
    def created(self):
        """
        Gets the created of this Auth.


        :return: The created of this Auth.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Auth.


        :param created: The created of this Auth.
        :type: datetime
        """
        self._created = created

    @property
    def lastmodified(self):
        """
        Gets the lastmodified of this Auth.


        :return: The lastmodified of this Auth.
        :rtype: datetime
        """
        return self._lastmodified

    @lastmodified.setter
    def lastmodified(self, lastmodified):
        """
        Sets the lastmodified of this Auth.


        :param lastmodified: The lastmodified of this Auth.
        :type: datetime
        """
        self._lastmodified = lastmodified

    @property
    def createdby(self):
        """
        Gets the createdby of this Auth.


        :return: The createdby of this Auth.
        :rtype: int
        """
        return self._createdby

    @createdby.setter
    def createdby(self, createdby):
        """
        Sets the createdby of this Auth.


        :param createdby: The createdby of this Auth.
        :type: int
        """
        self._createdby = createdby

    @property
    def createdbyname(self):
        """
        Gets the createdbyname of this Auth.


        :return: The createdbyname of this Auth.
        :rtype: str
        """
        return self._createdbyname

    @createdbyname.setter
    def createdbyname(self, createdbyname):
        """
        Sets the createdbyname of this Auth.


        :param createdbyname: The createdbyname of this Auth.
        :type: str
        """
        self._createdbyname = createdbyname

    @property
    def lastmodifiedby(self):
        """
        Gets the lastmodifiedby of this Auth.


        :return: The lastmodifiedby of this Auth.
        :rtype: int
        """
        return self._lastmodifiedby

    @lastmodifiedby.setter
    def lastmodifiedby(self, lastmodifiedby):
        """
        Sets the lastmodifiedby of this Auth.


        :param lastmodifiedby: The lastmodifiedby of this Auth.
        :type: int
        """
        self._lastmodifiedby = lastmodifiedby

    @property
    def lastmodifiedbyname(self):
        """
        Gets the lastmodifiedbyname of this Auth.


        :return: The lastmodifiedbyname of this Auth.
        :rtype: str
        """
        return self._lastmodifiedbyname

    @lastmodifiedbyname.setter
    def lastmodifiedbyname(self, lastmodifiedbyname):
        """
        Sets the lastmodifiedbyname of this Auth.


        :param lastmodifiedbyname: The lastmodifiedbyname of this Auth.
        :type: str
        """
        self._lastmodifiedbyname = lastmodifiedbyname

    @property
    def email(self):
        """
        Gets the email of this Auth.


        :return: The email of this Auth.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Auth.


        :param email: The email of this Auth.
        :type: str
        """
        self._email = email

    @property
    def emailid(self):
        """
        Gets the emailid of this Auth.


        :return: The emailid of this Auth.
        :rtype: int
        """
        return self._emailid

    @emailid.setter
    def emailid(self, emailid):
        """
        Sets the emailid of this Auth.


        :param emailid: The emailid of this Auth.
        :type: int
        """
        self._emailid = emailid

    @property
    def authid(self):
        """
        Gets the authid of this Auth.


        :return: The authid of this Auth.
        :rtype: str
        """
        return self._authid

    @authid.setter
    def authid(self, authid):
        """
        Sets the authid of this Auth.


        :param authid: The authid of this Auth.
        :type: str
        """
        self._authid = authid

    @property
    def plain_text_password(self):
        """
        Gets the plain_text_password of this Auth.


        :return: The plain_text_password of this Auth.
        :rtype: str
        """
        return self._plain_text_password

    @plain_text_password.setter
    def plain_text_password(self, plain_text_password):
        """
        Sets the plain_text_password of this Auth.


        :param plain_text_password: The plain_text_password of this Auth.
        :type: str
        """
        self._plain_text_password = plain_text_password

    @property
    def password(self):
        """
        Gets the password of this Auth.


        :return: The password of this Auth.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this Auth.


        :param password: The password of this Auth.
        :type: str
        """
        self._password = password

    @property
    def passwordreset(self):
        """
        Gets the passwordreset of this Auth.


        :return: The passwordreset of this Auth.
        :rtype: str
        """
        return self._passwordreset

    @passwordreset.setter
    def passwordreset(self, passwordreset):
        """
        Sets the passwordreset of this Auth.


        :param passwordreset: The passwordreset of this Auth.
        :type: str
        """
        self._passwordreset = passwordreset

    @property
    def verificationtoken(self):
        """
        Gets the verificationtoken of this Auth.


        :return: The verificationtoken of this Auth.
        :rtype: str
        """
        return self._verificationtoken

    @verificationtoken.setter
    def verificationtoken(self, verificationtoken):
        """
        Sets the verificationtoken of this Auth.


        :param verificationtoken: The verificationtoken of this Auth.
        :type: str
        """
        self._verificationtoken = verificationtoken

    @property
    def verified(self):
        """
        Gets the verified of this Auth.


        :return: The verified of this Auth.
        :rtype: str
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """
        Sets the verified of this Auth.


        :param verified: The verified of this Auth.
        :type: str
        """
        self._verified = verified

    @property
    def isactive(self):
        """
        Gets the isactive of this Auth.


        :return: The isactive of this Auth.
        :rtype: str
        """
        return self._isactive

    @isactive.setter
    def isactive(self, isactive):
        """
        Sets the isactive of this Auth.


        :param isactive: The isactive of this Auth.
        :type: str
        """
        self._isactive = isactive

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
