# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Url(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Url - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'url': 'str',
            'source': 'str',
            'nedid': 'int',
            'sourcetypeid': 'int',
            'id': 'int'
        }

        self.attribute_map = {
            'url': 'url',
            'source': 'source',
            'nedid': 'nedid',
            'sourcetypeid': 'sourcetypeid',
            'id': 'id'
        }

        self._url = None
        self._source = None
        self._nedid = None
        self._sourcetypeid = None
        self._id = None

    @property
    def url(self):
        """
        Gets the url of this Url.


        :return: The url of this Url.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Url.


        :param url: The url of this Url.
        :type: str
        """
        self._url = url

    @property
    def source(self):
        """
        Gets the source of this Url.


        :return: The source of this Url.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Url.


        :param source: The source of this Url.
        :type: str
        """
        self._source = source

    @property
    def nedid(self):
        """
        Gets the nedid of this Url.


        :return: The nedid of this Url.
        :rtype: int
        """
        return self._nedid

    @nedid.setter
    def nedid(self, nedid):
        """
        Sets the nedid of this Url.


        :param nedid: The nedid of this Url.
        :type: int
        """
        self._nedid = nedid

    @property
    def sourcetypeid(self):
        """
        Gets the sourcetypeid of this Url.


        :return: The sourcetypeid of this Url.
        :rtype: int
        """
        return self._sourcetypeid

    @sourcetypeid.setter
    def sourcetypeid(self, sourcetypeid):
        """
        Sets the sourcetypeid of this Url.


        :param sourcetypeid: The sourcetypeid of this Url.
        :type: int
        """
        self._sourcetypeid = sourcetypeid

    @property
    def id(self):
        """
        Gets the id of this Url.


        :return: The id of this Url.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Url.


        :param id: The id of this Url.
        :type: int
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
