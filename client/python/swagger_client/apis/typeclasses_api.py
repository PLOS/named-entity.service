# coding: utf-8

"""
TypeclassesApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TypeclassesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def list(self, **kwargs):
        """
        List
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int offset: 
        :param int limit: 
        :return: list[Typedescription]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/typeclasses'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Typedescription]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create(self, **kwargs):
        """
        Create
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Typedescription body: 
        :return: Typedescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/typeclasses'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Typedescription',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def read(self, id, **kwargs):
        """
        Read
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id:  (required)
        :return: Typedescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `read`")

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/typeclasses/{id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Typedescription',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update(self, **kwargs):
        """
        Update
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Typedescription body: 
        :return: Typedescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/typeclasses/{id}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Typedescription',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete(self, id, **kwargs):
        """
        Delete
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `delete`")

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/typeclasses/{id}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_global_type_for_type_class(self, typeclassid, **kwargs):
        """
        List global types
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_global_type_for_type_class(typeclassid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int typeclassid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'typeclassid' is set
        if typeclassid is None:
            raise ValueError("Missing the required parameter `typeclassid` when calling `get_global_type_for_type_class`")

        all_params = ['typeclassid']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_global_type_for_type_class" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/typeclasses/{typeclassid}/typevalues'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'typeclassid' in params:
            path_params['typeclassid'] = params['typeclassid']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_global_type(self, typeclassid, **kwargs):
        """
        Create global type
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_global_type(typeclassid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int typeclassid:  (required)
        :param Globaltype body: 
        :return: Globaltype
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'typeclassid' is set
        if typeclassid is None:
            raise ValueError("Missing the required parameter `typeclassid` when calling `create_global_type`")

        all_params = ['typeclassid', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_global_type" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/typeclasses/{typeclassid}/typevalues'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'typeclassid' in params:
            path_params['typeclassid'] = params['typeclassid']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Globaltype',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_global_type(self, typeclassid, typevalueid, **kwargs):
        """
        Read global type
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_global_type(typeclassid, typevalueid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int typeclassid:  (required)
        :param int typevalueid:  (required)
        :return: Globaltype
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'typeclassid' is set
        if typeclassid is None:
            raise ValueError("Missing the required parameter `typeclassid` when calling `get_global_type`")
        # verify the required parameter 'typevalueid' is set
        if typevalueid is None:
            raise ValueError("Missing the required parameter `typevalueid` when calling `get_global_type`")

        all_params = ['typeclassid', 'typevalueid']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_global_type" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/typeclasses/{typeclassid}/typevalues/{typevalueid}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'typeclassid' in params:
            path_params['typeclassid'] = params['typeclassid']
        if 'typevalueid' in params:
            path_params['typevalueid'] = params['typevalueid']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Globaltype',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_global_type(self, typeclassid, typevalueid, **kwargs):
        """
        Update global type
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_global_type(typeclassid, typevalueid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int typeclassid:  (required)
        :param int typevalueid:  (required)
        :param Globaltype body: 
        :return: Globaltype
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'typeclassid' is set
        if typeclassid is None:
            raise ValueError("Missing the required parameter `typeclassid` when calling `update_global_type`")
        # verify the required parameter 'typevalueid' is set
        if typevalueid is None:
            raise ValueError("Missing the required parameter `typevalueid` when calling `update_global_type`")

        all_params = ['typeclassid', 'typevalueid', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_global_type" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/typeclasses/{typeclassid}/typevalues/{typevalueid}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'typeclassid' in params:
            path_params['typeclassid'] = params['typeclassid']
        if 'typevalueid' in params:
            path_params['typevalueid'] = params['typevalueid']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Globaltype',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_global_type(self, typeclassid, typevalueid, **kwargs):
        """
        Delete global type
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_global_type(typeclassid, typevalueid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int typeclassid:  (required)
        :param int typevalueid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'typeclassid' is set
        if typeclassid is None:
            raise ValueError("Missing the required parameter `typeclassid` when calling `delete_global_type`")
        # verify the required parameter 'typevalueid' is set
        if typevalueid is None:
            raise ValueError("Missing the required parameter `typevalueid` when calling `delete_global_type`")

        all_params = ['typeclassid', 'typevalueid']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_global_type" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/typeclasses/{typeclassid}/typevalues/{typevalueid}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'typeclassid' in params:
            path_params['typeclassid'] = params['typeclassid']
        if 'typevalueid' in params:
            path_params['typevalueid'] = params['typevalueid']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
