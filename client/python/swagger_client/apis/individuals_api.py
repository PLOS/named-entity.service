# coding: utf-8

"""
IndividualsApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class IndividualsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def find_individuals(self, **kwargs):
        """
        Find individual matching specified attribute.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_individuals(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str entity: 
        :param str attribute: 
        :param str value: 
        :return: list[IndividualComposite]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity', 'attribute', 'value']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_individuals" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'entity' in params:
            query_params['entity'] = params['entity']
        if 'attribute' in params:
            query_params['attribute'] = params['attribute']
        if 'value' in params:
            query_params['value'] = params['value']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[IndividualComposite]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_individual(self, **kwargs):
        """
        Create individual
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_individual(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param IndividualComposite body: 
        :param str authorization: 
        :return: IndividualComposite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_individual" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='IndividualComposite',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def read_individual_by_cas_id(self, cas_id, **kwargs):
        """
        Read individual by CAS ID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_individual_by_cas_id(cas_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cas_id:  (required)
        :return: IndividualComposite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'cas_id' is set
        if cas_id is None:
            raise ValueError("Missing the required parameter `cas_id` when calling `read_individual_by_cas_id`")

        all_params = ['cas_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_individual_by_cas_id" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/CAS/{casId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'cas_id' in params:
            path_params['casId'] = params['cas_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='IndividualComposite',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def read_individual(self, ned_id, **kwargs):
        """
        Read individual by Ned ID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_individual(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: IndividualComposite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `read_individual`")

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_individual" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='IndividualComposite',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_addresses(self, ned_id, **kwargs):
        """
        List addresses
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_addresses(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: list[Address]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_addresses`")

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_addresses" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/addresses'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Address]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_address(self, ned_id, **kwargs):
        """
        Create address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_address(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param Address body: 
        :param str authorization: 
        :return: Address
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `create_address`")

        all_params = ['ned_id', 'body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_address" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/addresses'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Address',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_address(self, ned_id, address_id, **kwargs):
        """
        Read address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_address(ned_id, address_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int address_id:  (required)
        :return: Address
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_address`")
        # verify the required parameter 'address_id' is set
        if address_id is None:
            raise ValueError("Missing the required parameter `address_id` when calling `get_address`")

        all_params = ['ned_id', 'address_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_address" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/addresses/{addressId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'address_id' in params:
            path_params['addressId'] = params['address_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Address',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_address(self, ned_id, address_id, **kwargs):
        """
        Update address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_address(ned_id, address_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int address_id:  (required)
        :param Address body: 
        :param str authorization: 
        :return: Address
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `update_address`")
        # verify the required parameter 'address_id' is set
        if address_id is None:
            raise ValueError("Missing the required parameter `address_id` when calling `update_address`")

        all_params = ['ned_id', 'address_id', 'body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_address" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/addresses/{addressId}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'address_id' in params:
            path_params['addressId'] = params['address_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Address',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_address(self, ned_id, address_id, **kwargs):
        """
        Delete address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_address(ned_id, address_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int address_id:  (required)
        :param str authorization: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `delete_address`")
        # verify the required parameter 'address_id' is set
        if address_id is None:
            raise ValueError("Missing the required parameter `address_id` when calling `delete_address`")

        all_params = ['ned_id', 'address_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_address" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/addresses/{addressId}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'address_id' in params:
            path_params['addressId'] = params['address_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_record(self, ned_id, **kwargs):
        """
        List auth record(s)
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_record(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_auth_record`")

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_record" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/auth'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def check_password(self, ned_id, **kwargs):
        """
        Validate password
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.check_password(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param Auth body: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `check_password`")

        all_params = ['ned_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_password" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/auth/checkpassword'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_auth_record(self, ned_id, auth_id, **kwargs):
        """
        Update auth record
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_auth_record(ned_id, auth_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int auth_id:  (required)
        :param str authorization: 
        :param Auth body: 
        :return: Auth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `update_auth_record`")
        # verify the required parameter 'auth_id' is set
        if auth_id is None:
            raise ValueError("Missing the required parameter `auth_id` when calling `update_auth_record`")

        all_params = ['ned_id', 'auth_id', 'authorization', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_auth_record" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/auth/{authId}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'auth_id' in params:
            path_params['authId'] = params['auth_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Auth',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_degrees(self, ned_id, **kwargs):
        """
        List degrees
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_degrees(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: list[Degree]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_degrees`")

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_degrees" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/degrees'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Degree]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_emails(self, ned_id, **kwargs):
        """
        List emails
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_emails(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: list[Email]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_emails`")

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_emails" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/emails'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Email]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_email(self, ned_id, **kwargs):
        """
        Create email
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_email(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param Email body: 
        :param str authorization: 
        :return: Email
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `create_email`")

        all_params = ['ned_id', 'body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_email" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/emails'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Email',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_email(self, ned_id, email_id, **kwargs):
        """
        Read email
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_email(ned_id, email_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int email_id:  (required)
        :return: Email
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_email`")
        # verify the required parameter 'email_id' is set
        if email_id is None:
            raise ValueError("Missing the required parameter `email_id` when calling `get_email`")

        all_params = ['ned_id', 'email_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/emails/{emailId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'email_id' in params:
            path_params['emailId'] = params['email_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Email',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_email(self, ned_id, email_id, **kwargs):
        """
        Update email
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_email(ned_id, email_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int email_id:  (required)
        :param Email body: 
        :param str authorization: 
        :return: Email
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `update_email`")
        # verify the required parameter 'email_id' is set
        if email_id is None:
            raise ValueError("Missing the required parameter `email_id` when calling `update_email`")

        all_params = ['ned_id', 'email_id', 'body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_email" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/emails/{emailId}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'email_id' in params:
            path_params['emailId'] = params['email_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Email',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_email(self, ned_id, email_id, **kwargs):
        """
        Delete email
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_email(ned_id, email_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int email_id:  (required)
        :param str authorization: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `delete_email`")
        # verify the required parameter 'email_id' is set
        if email_id is None:
            raise ValueError("Missing the required parameter `email_id` when calling `delete_email`")

        all_params = ['ned_id', 'email_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_email" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/emails/{emailId}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'email_id' in params:
            path_params['emailId'] = params['email_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_groups(self, ned_id, **kwargs):
        """
        List groups
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_groups(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_groups`")

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/groups'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Group]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_group(self, ned_id, **kwargs):
        """
        Create group
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_group(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param Group body: 
        :param str authorization: 
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `create_group`")

        all_params = ['ned_id', 'body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_group" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/groups'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Group',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_group(self, ned_id, group_id, **kwargs):
        """
        Read group
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_group(ned_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int group_id:  (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_group`")
        # verify the required parameter 'group_id' is set
        if group_id is None:
            raise ValueError("Missing the required parameter `group_id` when calling `get_group`")

        all_params = ['ned_id', 'group_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/groups/{groupId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Group',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_group(self, ned_id, group_id, **kwargs):
        """
        Update group
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_group(ned_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int group_id:  (required)
        :param str authorization: 
        :param Group body: 
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `update_group`")
        # verify the required parameter 'group_id' is set
        if group_id is None:
            raise ValueError("Missing the required parameter `group_id` when calling `update_group`")

        all_params = ['ned_id', 'group_id', 'authorization', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_group" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/groups/{groupId}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Group',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_group(self, ned_id, group_id, **kwargs):
        """
        Delete group
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_group(ned_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int group_id:  (required)
        :param str authorization: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `delete_group`")
        # verify the required parameter 'group_id' is set
        if group_id is None:
            raise ValueError("Missing the required parameter `group_id` when calling `delete_group`")

        all_params = ['ned_id', 'group_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_group" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/groups/{groupId}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_profiles(self, ned_id, **kwargs):
        """
        List profiles
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_profiles(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: list[Individualprofile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_profiles`")

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/individualprofiles'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Individualprofile]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def add_profile(self, ned_id, **kwargs):
        """
        Add profile
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_profile(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param Individualprofile body: 
        :param str authorization: 
        :return: Individualprofile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `add_profile`")

        all_params = ['ned_id', 'body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_profile" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/individualprofiles'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Individualprofile',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_profile(self, ned_id, profile_id, **kwargs):
        """
        Read profile
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_profile(ned_id, profile_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int profile_id:  (required)
        :return: Individualprofile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_profile`")
        # verify the required parameter 'profile_id' is set
        if profile_id is None:
            raise ValueError("Missing the required parameter `profile_id` when calling `get_profile`")

        all_params = ['ned_id', 'profile_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profile" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/individualprofiles/{profileId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'profile_id' in params:
            path_params['profileId'] = params['profile_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Individualprofile',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_profile(self, ned_id, profile_id, **kwargs):
        """
        Update a profile
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_profile(ned_id, profile_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int profile_id:  (required)
        :param str authorization: 
        :param Individualprofile body: 
        :return: Individualprofile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `update_profile`")
        # verify the required parameter 'profile_id' is set
        if profile_id is None:
            raise ValueError("Missing the required parameter `profile_id` when calling `update_profile`")

        all_params = ['ned_id', 'profile_id', 'authorization', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_profile" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/individualprofiles/{profileId}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'profile_id' in params:
            path_params['profileId'] = params['profile_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Individualprofile',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_profile(self, ned_id, profile_id, **kwargs):
        """
        Delete a profile
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_profile(ned_id, profile_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int profile_id:  (required)
        :param str authorization: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `delete_profile`")
        # verify the required parameter 'profile_id' is set
        if profile_id is None:
            raise ValueError("Missing the required parameter `profile_id` when calling `delete_profile`")

        all_params = ['ned_id', 'profile_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_profile" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/individualprofiles/{profileId}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'profile_id' in params:
            path_params['profileId'] = params['profile_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_phonenumbers(self, ned_id, **kwargs):
        """
        List phone numbers
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_phonenumbers(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: list[Phonenumber]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_phonenumbers`")

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phonenumbers" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/phonenumbers'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Phonenumber]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_relationship(self, ned_id, **kwargs):
        """
        List relationships
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_relationship(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: list[Void]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_relationship`")

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_relationship" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/relationships'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Void]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_relationship(self, ned_id, **kwargs):
        """
        Create relationship
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_relationship(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param Relationship body: 
        :param str authorization: 
        :return: Relationship
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `create_relationship`")

        all_params = ['ned_id', 'body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_relationship" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/relationships'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Relationship',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_relationship_1(self, ned_id, relationship_id, **kwargs):
        """
        Read relationship
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_relationship_1(ned_id, relationship_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int relationship_id:  (required)
        :return: Relationship
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_relationship_1`")
        # verify the required parameter 'relationship_id' is set
        if relationship_id is None:
            raise ValueError("Missing the required parameter `relationship_id` when calling `get_relationship_1`")

        all_params = ['ned_id', 'relationship_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_relationship_1" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/relationships/{relationshipId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'relationship_id' in params:
            path_params['relationshipId'] = params['relationship_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Relationship',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_relationship(self, ned_id, relationship_id, **kwargs):
        """
        Update relationship
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_relationship(ned_id, relationship_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int relationship_id:  (required)
        :param str authorization: 
        :param Relationship body: 
        :return: Relationship
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `update_relationship`")
        # verify the required parameter 'relationship_id' is set
        if relationship_id is None:
            raise ValueError("Missing the required parameter `relationship_id` when calling `update_relationship`")

        all_params = ['ned_id', 'relationship_id', 'authorization', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_relationship" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/relationships/{relationshipId}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'relationship_id' in params:
            path_params['relationshipId'] = params['relationship_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Relationship',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_relationship(self, ned_id, relationship_id, **kwargs):
        """
        Delete relationship
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_relationship(ned_id, relationship_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int relationship_id:  (required)
        :param str authorization: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `delete_relationship`")
        # verify the required parameter 'relationship_id' is set
        if relationship_id is None:
            raise ValueError("Missing the required parameter `relationship_id` when calling `delete_relationship`")

        all_params = ['ned_id', 'relationship_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_relationship" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/relationships/{relationshipId}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'relationship_id' in params:
            path_params['relationshipId'] = params['relationship_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_uids(self, ned_id, **kwargs):
        """
        List UIDs
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_uids(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :return: list[Uniqueidentifier]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_uids`")

        all_params = ['ned_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_uids" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/uids'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Uniqueidentifier]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_uid(self, ned_id, **kwargs):
        """
        Create UID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_uid(ned_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param Uniqueidentifier body: 
        :param str authorization: 
        :return: Uniqueidentifier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `create_uid`")

        all_params = ['ned_id', 'body', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_uid" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/uids'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Uniqueidentifier',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_uid(self, ned_id, id, **kwargs):
        """
        Read uid
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_uid(ned_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int id:  (required)
        :return: Uniqueidentifier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `get_uid`")
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `get_uid`")

        all_params = ['ned_id', 'id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_uid" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/uids/{id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Uniqueidentifier',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_uid(self, ned_id, id, **kwargs):
        """
        Update UID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_uid(ned_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int id:  (required)
        :param str authorization: 
        :param Uniqueidentifier body: 
        :return: Uniqueidentifier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `update_uid`")
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `update_uid`")

        all_params = ['ned_id', 'id', 'authorization', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_uid" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/uids/{id}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Uniqueidentifier',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_uid(self, ned_id, id, **kwargs):
        """
        Delete UID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_uid(ned_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int ned_id:  (required)
        :param int id:  (required)
        :param str authorization: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'ned_id' is set
        if ned_id is None:
            raise ValueError("Missing the required parameter `ned_id` when calling `delete_uid`")
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `delete_uid`")

        all_params = ['ned_id', 'id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_uid" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{nedId}/uids/{id}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'ned_id' in params:
            path_params['nedId'] = params['ned_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def read_individual_by_uid(self, uid_type, uid_value, **kwargs):
        """
        Read individual by UID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_individual_by_uid(uid_type, uid_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str uid_type:  (required)
        :param str uid_value:  (required)
        :return: IndividualComposite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'uid_type' is set
        if uid_type is None:
            raise ValueError("Missing the required parameter `uid_type` when calling `read_individual_by_uid`")
        # verify the required parameter 'uid_value' is set
        if uid_value is None:
            raise ValueError("Missing the required parameter `uid_value` when calling `read_individual_by_uid`")

        all_params = ['uid_type', 'uid_value']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_individual_by_uid" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/individuals/{uidType}/{uidValue}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'uid_type' in params:
            path_params['uidType'] = params['uid_type']
        if 'uid_value' in params:
            path_params['uidValue'] = params['uid_value']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='IndividualComposite',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
