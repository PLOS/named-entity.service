#!/usr/bin/env bash

#set -x
set -o errexit

. /usr/share/debconf/confmodule

NAME=ned

TOMCAT7_USER=$NAME
TOMCAT7_GROUP=$NAME
HOME=/opt/plos/$NAME

function process_env_template {
	CONTEXT_TEMPLATE=$1
	OUTFILE=$2

  ls -lh $CONTEXT_TEMPLATE

	echo "Processing template $CONTEXT_TEMPLATE"

  eval "cat <<EOF
$(<$CONTEXT_TEMPLATE)
EOF
" > $OUTFILE
}

case "$1" in
  configure|reconfigure)

    # create user/group

    if ! getent group "$TOMCAT7_GROUP" > /dev/null 2>&1 ; then
        addgroup --system "$TOMCAT7_GROUP" --quiet
    fi
    if ! id $TOMCAT7_USER > /dev/null 2>&1 ; then
        adduser --system --home $HOME --no-create-home \
      --ingroup "$TOMCAT7_GROUP" --disabled-password --shell /bin/false \
      "$TOMCAT7_USER"
    fi

    chmod +x $HOME/bin/*.sh
    chown -Rh $TOMCAT7_USER:$TOMCAT7_GROUP $HOME

    GET="db_get [[artifactId]]"

    # Fetching configuration from debconf

    $GET/ned_db_host && export NED_DB_HOST=$RET
    $GET/ned_db_user && export NED_DB_USER=$RET
    $GET/ned_db_password && export NED_DB_PASSWORD=$RET
    $GET/ringgold_db_host && export RINGGOLD_DB_HOST=$RET
    $GET/ringgold_db_user && export RINGGOLD_DB_USER=$RET
    $GET/ringgold_db_password && export RINGGOLD_DB_PASSWORD=$RET
    $GET/ringgold_import_dir && export RINGGOLD_DIR=$RET
    $GET/tomcat_admin_user && export TOMCAT_ADMIN_USER=$RET
    $GET/tomcat_admin_password && export TOMCAT_ADMIN_PASSWORD=$RET
    $GET/http_port && export HTTP_PORT=$RET
    $GET/control_port && export CONTROL_PORT=$RET

    # generate configs from templates
    process_env_template $HOME/conf/context.template.xml $HOME/conf/context.xml

    process_env_template $HOME/conf/server.template.xml $HOME/conf/server.xml

    process_env_template $HOME/conf/tomcat-users.template.xml $HOME/conf/tomcat-users.xml

    # run the migrations and import ringgold
    export MIGRATIONS_DIR=$HOME/migrations
    $HOME/bin/migrate.sh

		# update service state
		if [ -d /run/systemd/system ] ; then
			systemctl --system daemon-reload >/dev/null || true
		fi

		if [ -x "/etc/init.d/$NAME" ] || [ -e "/etc/init/$NAME.conf" ]; then
		  if [ ! -e "/etc/init/$NAME.conf" ]; then
		    update-rc.d $NAME defaults >/dev/null
		  fi
		#	invoke-rc.d $NAME start || true
		  service $NAME start || true
		fi

		# test if service is up
		TEST_ENDPOINT=http://localhost:$HTTP_PORT/v1/service/config

		echo "Checking to see if service is running at $TEST_ENDPOINT"
		curl -I $TEST_ENDPOINT # show result for debugging errors
		curl -I $TEST_ENDPOINT | grep '200 OK' # fail install if status incorrect
  ;;

  abort-upgrade|abort-remove|abort-deconfigure)
  ;;

  *)
    echo "postinst called with unknown argument \`$1'" >&2
    exit 1
  ;;

esac
