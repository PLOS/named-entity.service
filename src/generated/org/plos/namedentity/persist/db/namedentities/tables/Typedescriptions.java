/**
 * This class is generated by jOOQ
 */
package org.plos.namedentity.persist.db.namedentities.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.plos.namedentity.persist.db.namedentities.Keys;
import org.plos.namedentity.persist.db.namedentities.Namedentities;
import org.plos.namedentity.persist.db.namedentities.tables.records.TypedescriptionsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Typedescriptions extends TableImpl<TypedescriptionsRecord> {

	private static final long serialVersionUID = -745825436;

	/**
	 * The reference instance of <code>namedEntities.typeDescriptions</code>
	 */
	public static final Typedescriptions TYPEDESCRIPTIONS = new Typedescriptions();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TypedescriptionsRecord> getRecordType() {
		return TypedescriptionsRecord.class;
	}

	/**
	 * The column <code>namedEntities.typeDescriptions.id</code>.
	 */
	public final TableField<TypedescriptionsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.typeDescriptions.description</code>.
	 */
	public final TableField<TypedescriptionsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.typeDescriptions.howUsed</code>.
	 */
	public final TableField<TypedescriptionsRecord, String> HOWUSED = createField("howUsed", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>namedEntities.typeDescriptions.created</code>.
	 */
	public final TableField<TypedescriptionsRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>namedEntities.typeDescriptions.lastModified</code>.
	 */
	public final TableField<TypedescriptionsRecord, Timestamp> LASTMODIFIED = createField("lastModified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * Create a <code>namedEntities.typeDescriptions</code> table reference
	 */
	public Typedescriptions() {
		this("typeDescriptions", null);
	}

	/**
	 * Create an aliased <code>namedEntities.typeDescriptions</code> table reference
	 */
	public Typedescriptions(String alias) {
		this(alias, TYPEDESCRIPTIONS);
	}

	private Typedescriptions(String alias, Table<TypedescriptionsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Typedescriptions(String alias, Table<TypedescriptionsRecord> aliased, Field<?>[] parameters) {
		super(alias, Namedentities.NAMEDENTITIES, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<TypedescriptionsRecord, Integer> getIdentity() {
		return Keys.IDENTITY_TYPEDESCRIPTIONS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TypedescriptionsRecord> getPrimaryKey() {
		return Keys.KEY_TYPEDESCRIPTIONS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TypedescriptionsRecord>> getKeys() {
		return Arrays.<UniqueKey<TypedescriptionsRecord>>asList(Keys.KEY_TYPEDESCRIPTIONS_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Typedescriptions as(String alias) {
		return new Typedescriptions(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Typedescriptions rename(String name) {
		return new Typedescriptions(name, null);
	}
}
