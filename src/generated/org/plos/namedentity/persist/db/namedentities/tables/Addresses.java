/*
 * Copyright (c) 2017 Public Library of Science
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * This class is generated by jOOQ
 */
package org.plos.namedentity.persist.db.namedentities.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.plos.namedentity.persist.db.namedentities.Keys;
import org.plos.namedentity.persist.db.namedentities.Namedentities;
import org.plos.namedentity.persist.db.namedentities.tables.records.AddressesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Addresses extends TableImpl<AddressesRecord> {

	private static final long serialVersionUID = 1453398512;

	/**
	 * The reference instance of <code>namedEntities.addresses</code>
	 */
	public static final Addresses ADDRESSES = new Addresses();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AddressesRecord> getRecordType() {
		return AddressesRecord.class;
	}

	/**
	 * The column <code>namedEntities.addresses.id</code>.
	 */
	public final TableField<AddressesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.addresses.nedId</code>.
	 */
	public final TableField<AddressesRecord, Integer> NEDID = createField("nedId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.addresses.typeId</code>.
	 */
	public final TableField<AddressesRecord, Integer> TYPEID = createField("typeId", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>namedEntities.addresses.addressLine1</code>.
	 */
	public final TableField<AddressesRecord, String> ADDRESSLINE1 = createField("addressLine1", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>namedEntities.addresses.addressLine2</code>.
	 */
	public final TableField<AddressesRecord, String> ADDRESSLINE2 = createField("addressLine2", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>namedEntities.addresses.addressLine3</code>.
	 */
	public final TableField<AddressesRecord, String> ADDRESSLINE3 = createField("addressLine3", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>namedEntities.addresses.city</code>.
	 */
	public final TableField<AddressesRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>namedEntities.addresses.stateCodeTypeId</code>.
	 */
	public final TableField<AddressesRecord, Integer> STATECODETYPEID = createField("stateCodeTypeId", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>namedEntities.addresses.countryCodeTypeId</code>.
	 */
	public final TableField<AddressesRecord, Integer> COUNTRYCODETYPEID = createField("countryCodeTypeId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.addresses.postalCode</code>.
	 */
	public final TableField<AddressesRecord, String> POSTALCODE = createField("postalCode", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>namedEntities.addresses.mainContactNamedEntityId</code>.
	 */
	public final TableField<AddressesRecord, Integer> MAINCONTACTNAMEDENTITYID = createField("mainContactNamedEntityId", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>namedEntities.addresses.latitude</code>.
	 */
	public final TableField<AddressesRecord, Integer> LATITUDE = createField("latitude", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>namedEntities.addresses.longitude</code>.
	 */
	public final TableField<AddressesRecord, Integer> LONGITUDE = createField("longitude", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>namedEntities.addresses.sourceTypeId</code>.
	 */
	public final TableField<AddressesRecord, Integer> SOURCETYPEID = createField("sourceTypeId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.addresses.isActive</code>.
	 */
	public final TableField<AddressesRecord, Byte> ISACTIVE = createField("isActive", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>namedEntities.addresses.created</code>.
	 */
	public final TableField<AddressesRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>namedEntities.addresses.createdBy</code>.
	 */
	public final TableField<AddressesRecord, Integer> CREATEDBY = createField("createdBy", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.addresses.lastModified</code>.
	 */
	public final TableField<AddressesRecord, Timestamp> LASTMODIFIED = createField("lastModified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>namedEntities.addresses.lastModifiedBy</code>.
	 */
	public final TableField<AddressesRecord, Integer> LASTMODIFIEDBY = createField("lastModifiedBy", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>namedEntities.addresses</code> table reference
	 */
	public Addresses() {
		this("addresses", null);
	}

	/**
	 * Create an aliased <code>namedEntities.addresses</code> table reference
	 */
	public Addresses(String alias) {
		this(alias, ADDRESSES);
	}

	private Addresses(String alias, Table<AddressesRecord> aliased) {
		this(alias, aliased, null);
	}

	private Addresses(String alias, Table<AddressesRecord> aliased, Field<?>[] parameters) {
		super(alias, Namedentities.NAMEDENTITIES, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<AddressesRecord, Integer> getIdentity() {
		return Keys.IDENTITY_ADDRESSES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AddressesRecord> getPrimaryKey() {
		return Keys.KEY_ADDRESSES_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AddressesRecord>> getKeys() {
		return Arrays.<UniqueKey<AddressesRecord>>asList(Keys.KEY_ADDRESSES_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<AddressesRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<AddressesRecord, ?>>asList(Keys.ADDRESSES_IBFK_1, Keys.ADDRESSES_IBFK_3, Keys.ADDRESSES_IBFK_2, Keys.ADDRESSES_IBFK_4, Keys.ADDRESSES_IBFK_5);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Addresses as(String alias) {
		return new Addresses(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Addresses rename(String name) {
		return new Addresses(name, null);
	}
}
