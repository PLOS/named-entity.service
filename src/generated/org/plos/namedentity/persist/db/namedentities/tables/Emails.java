/**
 * This class is generated by jOOQ
 */
package org.plos.namedentity.persist.db.namedentities.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.plos.namedentity.persist.db.namedentities.Keys;
import org.plos.namedentity.persist.db.namedentities.Namedentities;
import org.plos.namedentity.persist.db.namedentities.tables.records.EmailsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Emails extends TableImpl<EmailsRecord> {

	private static final long serialVersionUID = 205159971;

	/**
	 * The reference instance of <code>namedEntities.emails</code>
	 */
	public static final Emails EMAILS = new Emails();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<EmailsRecord> getRecordType() {
		return EmailsRecord.class;
	}

	/**
	 * The column <code>namedEntities.emails.id</code>.
	 */
	public final TableField<EmailsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.emails.nedId</code>.
	 */
	public final TableField<EmailsRecord, Integer> NEDID = createField("nedId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.emails.typeId</code>.
	 */
	public final TableField<EmailsRecord, Integer> TYPEID = createField("typeId", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>namedEntities.emails.emailAddress</code>.
	 */
	public final TableField<EmailsRecord, String> EMAILADDRESS = createField("emailAddress", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>namedEntities.emails.sourceTypeId</code>.
	 */
	public final TableField<EmailsRecord, Integer> SOURCETYPEID = createField("sourceTypeId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.emails.verified</code>.
	 */
	public final TableField<EmailsRecord, Byte> VERIFIED = createField("verified", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>namedEntities.emails.isActive</code>.
	 */
	public final TableField<EmailsRecord, Byte> ISACTIVE = createField("isActive", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>namedEntities.emails.created</code>.
	 */
	public final TableField<EmailsRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>namedEntities.emails.createdBy</code>.
	 */
	public final TableField<EmailsRecord, Integer> CREATEDBY = createField("createdBy", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.emails.lastModified</code>.
	 */
	public final TableField<EmailsRecord, Timestamp> LASTMODIFIED = createField("lastModified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>namedEntities.emails.lastModifiedBy</code>.
	 */
	public final TableField<EmailsRecord, Integer> LASTMODIFIEDBY = createField("lastModifiedBy", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>namedEntities.emails</code> table reference
	 */
	public Emails() {
		this("emails", null);
	}

	/**
	 * Create an aliased <code>namedEntities.emails</code> table reference
	 */
	public Emails(String alias) {
		this(alias, EMAILS);
	}

	private Emails(String alias, Table<EmailsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Emails(String alias, Table<EmailsRecord> aliased, Field<?>[] parameters) {
		super(alias, Namedentities.NAMEDENTITIES, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<EmailsRecord, Integer> getIdentity() {
		return Keys.IDENTITY_EMAILS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<EmailsRecord> getPrimaryKey() {
		return Keys.KEY_EMAILS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<EmailsRecord>> getKeys() {
		return Arrays.<UniqueKey<EmailsRecord>>asList(Keys.KEY_EMAILS_PRIMARY, Keys.KEY_EMAILS_EMAILADDRESS);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<EmailsRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<EmailsRecord, ?>>asList(Keys.EMAILS_IBFK_1, Keys.EMAILS_IBFK_3, Keys.EMAILS_IBFK_2, Keys.EMAILS_IBFK_4, Keys.EMAILS_IBFK_5);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Emails as(String alias) {
		return new Emails(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Emails rename(String name) {
		return new Emails(name, null);
	}
}
