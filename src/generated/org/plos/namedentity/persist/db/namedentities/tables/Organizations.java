/*
 * Copyright (c) 2017 Public Library of Science
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * This class is generated by jOOQ
 */
package org.plos.namedentity.persist.db.namedentities.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.plos.namedentity.persist.db.namedentities.Keys;
import org.plos.namedentity.persist.db.namedentities.Namedentities;
import org.plos.namedentity.persist.db.namedentities.tables.records.OrganizationsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Organizations extends TableImpl<OrganizationsRecord> {

	private static final long serialVersionUID = 870934298;

	/**
	 * The reference instance of <code>namedEntities.organizations</code>
	 */
	public static final Organizations ORGANIZATIONS = new Organizations();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<OrganizationsRecord> getRecordType() {
		return OrganizationsRecord.class;
	}

	/**
	 * The column <code>namedEntities.organizations.id</code>.
	 */
	public final TableField<OrganizationsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.organizations.nedId</code>.
	 */
	public final TableField<OrganizationsRecord, Integer> NEDID = createField("nedId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.organizations.typeId</code>.
	 */
	public final TableField<OrganizationsRecord, Integer> TYPEID = createField("typeId", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>namedEntities.organizations.familiarName</code>.
	 */
	public final TableField<OrganizationsRecord, String> FAMILIARNAME = createField("familiarName", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.organizations.legalName</code>.
	 */
	public final TableField<OrganizationsRecord, String> LEGALNAME = createField("legalName", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>namedEntities.organizations.mainContactId</code>.
	 */
	public final TableField<OrganizationsRecord, Integer> MAINCONTACTID = createField("mainContactId", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>namedEntities.organizations.sourceTypeId</code>.
	 */
	public final TableField<OrganizationsRecord, Integer> SOURCETYPEID = createField("sourceTypeId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.organizations.isActive</code>.
	 */
	public final TableField<OrganizationsRecord, Byte> ISACTIVE = createField("isActive", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>namedEntities.organizations.created</code>.
	 */
	public final TableField<OrganizationsRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>namedEntities.organizations.createdBy</code>.
	 */
	public final TableField<OrganizationsRecord, Integer> CREATEDBY = createField("createdBy", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>namedEntities.organizations.lastModified</code>.
	 */
	public final TableField<OrganizationsRecord, Timestamp> LASTMODIFIED = createField("lastModified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>namedEntities.organizations.lastModifiedBy</code>.
	 */
	public final TableField<OrganizationsRecord, Integer> LASTMODIFIEDBY = createField("lastModifiedBy", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>namedEntities.organizations</code> table reference
	 */
	public Organizations() {
		this("organizations", null);
	}

	/**
	 * Create an aliased <code>namedEntities.organizations</code> table reference
	 */
	public Organizations(String alias) {
		this(alias, ORGANIZATIONS);
	}

	private Organizations(String alias, Table<OrganizationsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Organizations(String alias, Table<OrganizationsRecord> aliased, Field<?>[] parameters) {
		super(alias, Namedentities.NAMEDENTITIES, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<OrganizationsRecord, Integer> getIdentity() {
		return Keys.IDENTITY_ORGANIZATIONS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<OrganizationsRecord> getPrimaryKey() {
		return Keys.KEY_ORGANIZATIONS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<OrganizationsRecord>> getKeys() {
		return Arrays.<UniqueKey<OrganizationsRecord>>asList(Keys.KEY_ORGANIZATIONS_PRIMARY, Keys.KEY_ORGANIZATIONS_LEGALNAME);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<OrganizationsRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<OrganizationsRecord, ?>>asList(Keys.ORGANIZATIONS_IBFK_1, Keys.ORGANIZATIONS_IBFK_2, Keys.ORGANIZATIONS_IBFK_3, Keys.ORGANIZATIONS_IBFK_5, Keys.ORGANIZATIONS_IBFK_6);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Organizations as(String alias) {
		return new Organizations(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Organizations rename(String name) {
		return new Organizations(name, null);
	}
}
