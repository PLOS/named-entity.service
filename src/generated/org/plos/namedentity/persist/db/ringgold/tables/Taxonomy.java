/*
 * Copyright (c) 2017 Public Library of Science
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * This class is generated by jOOQ
 */
package org.plos.namedentity.persist.db.ringgold.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.plos.namedentity.persist.db.ringgold.Keys;
import org.plos.namedentity.persist.db.ringgold.Ringgold;
import org.plos.namedentity.persist.db.ringgold.tables.records.TaxonomyRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Taxonomy extends TableImpl<TaxonomyRecord> {

	private static final long serialVersionUID = 1708461526;

	/**
	 * The reference instance of <code>ringgold.taxonomy</code>
	 */
	public static final Taxonomy TAXONOMY = new Taxonomy();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TaxonomyRecord> getRecordType() {
		return TaxonomyRecord.class;
	}

	/**
	 * The column <code>ringgold.taxonomy.rec_id</code>.
	 */
	public final TableField<TaxonomyRecord, Integer> REC_ID = createField("rec_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>ringgold.taxonomy.vocabulary</code>.
	 */
	public final TableField<TaxonomyRecord, String> VOCABULARY = createField("vocabulary", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>ringgold.taxonomy.name</code>.
	 */
	public final TableField<TaxonomyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>ringgold.taxonomy.description</code>.
	 */
	public final TableField<TaxonomyRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>ringgold.taxonomy.timestamp</code>.
	 */
	public final TableField<TaxonomyRecord, Timestamp> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * Create a <code>ringgold.taxonomy</code> table reference
	 */
	public Taxonomy() {
		this("taxonomy", null);
	}

	/**
	 * Create an aliased <code>ringgold.taxonomy</code> table reference
	 */
	public Taxonomy(String alias) {
		this(alias, TAXONOMY);
	}

	private Taxonomy(String alias, Table<TaxonomyRecord> aliased) {
		this(alias, aliased, null);
	}

	private Taxonomy(String alias, Table<TaxonomyRecord> aliased, Field<?>[] parameters) {
		super(alias, Ringgold.RINGGOLD, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<TaxonomyRecord, Integer> getIdentity() {
		return Keys.IDENTITY_TAXONOMY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TaxonomyRecord> getPrimaryKey() {
		return Keys.KEY_TAXONOMY_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TaxonomyRecord>> getKeys() {
		return Arrays.<UniqueKey<TaxonomyRecord>>asList(Keys.KEY_TAXONOMY_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Taxonomy as(String alias) {
		return new Taxonomy(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Taxonomy rename(String name) {
		return new Taxonomy(name, null);
	}
}
